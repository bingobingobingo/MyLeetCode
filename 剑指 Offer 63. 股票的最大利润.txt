//暴力循环 超时
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.size() == 0) return 0;
        int max = 0;
        for(int i = 0; i < prices.size(); i++) {
            for(int j = i + 1; j < prices.size(); j++) {
                if(prices[j] - prices[i] > max) max = prices[j] - prices[i];
            }
        }
        return max;
    }
};
//模拟迭代
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.size() < 2) return 0;
        int min = prices[0];
        int max = 0;
       
        for(int i = 1; i < prices.size(); i++) {
            if(prices[i - 1] < min) min = prices[i - 1];
            if(prices[i] - min > max) max = prices[i] - min;
        }
        return max;
    }
};
//动态规划 dp[i] = max(dp[i - 1], prices[i] - min(prices[0:i]))
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.size() < 2) return 0;
        vector<int> dp(prices.size());
        dp[0] = 0;
        int min = prices[0];
        for(int i = 1; i < prices.size(); i++) {
            if(prices[i] - min > dp[i - 1]) {
                dp[i] = prices[i] - min;
            } else{
                dp[i] = dp[i - 1];
            }
            if(prices[i] < min) min = prices[i];
        }
        return dp[prices.size() - 1];
    }
};
