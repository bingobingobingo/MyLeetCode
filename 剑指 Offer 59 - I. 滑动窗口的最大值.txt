//暴力循环
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        for(int i = k - 1; i < nums.size(); i++) {
            int max = nums[i];
            for(int j = i - 1; j >= i - k + 1; j--) {
                if(nums[j] > max) max = nums[j];
            }
            res.emplace_back(max);
        }
        return res;
    }
};
//队列
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        deque<int> q;
        for(int i = 0; i < k; i++) {
            while(!q.empty() && nums[i] >= nums[q.back()]) q.pop_back();
            q.push_back(i);
        }
        for(int i = k; i < nums.size(); i++) {
            res.push_back(nums[q.front()]);
            while(!q.empty() && nums[i] >= nums[q.back()]) q.pop_back();
            if(!q.empty() && q.front() <= (i - k)) q.pop_front();
            q.push_back(i);
        }
        if(!q.empty()) res.push_back(nums[q.front()]);
        return res;
    }
};
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        deque<int> q;
        for(int i = 0; i < nums.size(); i++) {
            while(!q.empty() && nums[i] >= nums[q.back()]) q.pop_back();
            q.push_back(i);
            if(!q.empty() && q.front() <= (i - k)) q.pop_front();
            if(i >= k - 1) res.push_back(nums[q.front()]);
        }
        return res;
    }
};