//迭代
/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {
    res := &ListNode{0, nil}
    head := res
    for l1 != nil && l2 != nil {
        if l1.Val < l2.Val {
            res.Next = l1
            res = res.Next
            l1 = l1.Next
        } else {
            res.Next = l2
            res = res.Next
            l2 = l2.Next
        }
    }
    if l1 == nil {
        res.Next = l2
    } else if l2 == nil {
        res.Next = l1
    }

    return head.Next
}

//递归
/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {
    if l1 == nil {
        return l2
    } else if l2 == nil {
        return l1
    }
    var res *ListNode
    if l1.Val < l2.Val {
        res = l1
        res.Next = mergeTwoLists(l1.Next, l2)
    } else {
        res = l2
        res.Next = mergeTwoLists(l1, l2.Next)
    }
    
    return res
}