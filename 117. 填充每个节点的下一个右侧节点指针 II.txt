//层次遍历 + 队列
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if(root == NULL) return root;
        queue<Node*> q;
        q.push(root);
        int num = 0;
        Node* temp = nullptr;
        while(!q.empty()) {
            num = q.size();
            temp = q.front();
            if(q.front()->left != NULL) q.push(q.front()->left);
            if(q.front()->right != NULL) q.push(q.front()->right);
            q.pop();
            for(int i = 1; i < num; i++) {
                temp->next = q.front();
                temp = temp->next;
                if(q.front()->left) q.push(q.front()->left);
                if(q.front()->right) q.push(q.front()->right);
                q.pop();
            }
        }
        return root;
    }
};
//层次遍历，在每一层创建下一层的next
Node* connect(Node* root) {
        Node* cur = root;
        while(cur != NULL) {
            Node* head = new Node(0);
            Node* tail = head;
            while(cur != NULL) {   
                if(cur->left != NULL) {
                    tail->next = cur->left;
                    tail = tail->next;
                }
                if(cur->right != NULL) {
                    tail->next = cur->right;
                    tail = tail->next;
                }
                cur = cur->next;
            }
            cur = head->next;
        }
        return root;
    }