//循环遍历链表 超时
class Solution {
public:
    int lastRemaining(int n, int m) {
        if(n == 1) return 0;
        list<int> l;
        for(int i = 0; i < n; i++) {
            l.push_back(i);
        }
        list<int>::iterator  cur = l.begin();
        while(l.size() > 1) {
            for(int i = 1; i < m; i++) {
                cur++;
                if(cur == l.end()) cur = l.begin();
            }
            cur = l.erase(cur);
            if(cur == l.end()) cur = l.begin();
        }
        return *cur;
    }
};
//数学公式 f(n,m)=(x + m%n)%n=(x + m)%n 表示长度为n的序列 向后数m个元素并删除
//x = f(n - 1,m) 表示上一轮被删结点的下一个结点的index，即从x开始再数m个
class Solution {
public:
    int lastRemaining(int n, int m) {
        if(n == 1) return 0;
       return (lastRemaining(n - 1, m) + m) % n;
    }
};

class Solution {
public:
    int lastRemaining(int n, int m) {
        if(n == 1) return 0;
        int x = 0;
        for(int i = 2; i <= n; i++) {
            x = (x + m) % i;
        }
       return x;
    }
};