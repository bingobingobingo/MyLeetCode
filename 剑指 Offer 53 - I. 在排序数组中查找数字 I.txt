//map
class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(nums.size() == 0) return 0;
        map<int, int> m;
        for(int num: nums) {
            if(m.find(num) == m.end()) {
                m[num] = 1;
            } else {
                m[num]++;
            }
        }
        return m[target];
    }
}; 
//递归二分查找
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int left = getLeft(nums, target, 0, nums.size() - 1);
        int right = getRight(nums, target, 0, nums.size() - 1);
        // cout<<"l="<<left<<"r="<<right<<endl;
        if(left > -1 && right > -1) return right - left + 1;
        return 0;
    }
    int getLeft(vector<int>& nums, int target, int start, int end) {
        if(start > end) return -1;
        int mid = (start + end) / 2;
        if(nums[mid] == target) {
            if((mid > 0 && nums[mid - 1] != target) || mid == 0)
                return mid;
            else 
                end = mid - 1;
        } else if(nums[mid] > target) {
            end = mid - 1;
        } else {
            start = mid + 1;
        }
        return getLeft(nums, target, start, end);
    }
    int getRight(vector<int>& nums, int target, int start, int end) {
        if(start > end) return -1;
        int mid = (start + end) / 2;
        if(nums[mid] == target) {
            if((mid < nums.size() - 1 && nums[mid + 1] != target) || mid == nums.size() - 1)
                return mid;
            else 
                start = mid + 1;
        } else if(nums[mid] > target) {
            end = mid - 1;
        } else {
            start = mid + 1;
        }
        return getRight(nums, target, start, end);
    }
}; 
//循环二分查找
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int i = 0;
        int j = nums.size() - 1;
        int left, right;
        //right
        while(i <= j) {
            int m = (i + j) / 2;
            if(nums[m] <= target) {
                i = m + 1;
            } else{
                j = m - 1;
            }
        }
        if(j >= 0 && nums[j] != target) return 0;
        right = i;
        //left
        i = 0;
        j = nums.size() - 1;
        while(i <= j) {
            int m = (i + j) / 2;
            if(nums[m] >= target) {
                j = m - 1;
            } else{
                i = m + 1;
            }
        }
        left = j;
        return right - left - 1;
    }
}; 