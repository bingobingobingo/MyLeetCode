//动态规划
//投掷n个骰子得到和为s的次数是投掷n-1个骰子时和为s-1,s-2,s-3,s-4,s-5,s-6的次数的总和
//dp[n][i] = dp[n-1][i-1] + dp[n-1][i-2] + dp[n-1][i-3] + ... + dp[n-1][n]
class Solution {
public:
    vector<double> twoSum(int n) {
        vector<vector<double>> dp;
        dp.resize(n+1);
        for(int i = 0; i <= n; i++) {
            dp[i].resize(6 * n + 1);
        }
        dp[0][1] = 6;
        for(int i = 1; i <= 6; i++) {
            dp[1][i] = 1.0;
        }

        for(int i = 2; i <= n; i++) {
            int count = 0;
            for(int j = i; j <= 6 * i; j++) {
                double sum = 0;
                int index = j - 1;
                while(index >= i-1 && index >= j - 6 ) {
                    sum +=dp[i - 1][index];
                    index--;
                }
                dp[i][j] = sum;
                count += sum;
            }
            dp[0][i] = count;
        }

        vector<double> res;
        for(int i = n; i <= 6 * n; i++) {
            res.push_back(dp[n][i]/(dp[0][n]));
        }
        return res;
    }
};