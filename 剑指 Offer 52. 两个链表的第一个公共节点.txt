/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(headA == NULL || headB == NULL) return NULL;
        int countA,countB;
        countA = 0;
        countB = 0;
        recur(headA, countA);
        recur(headB,countB);
        ListNode *res; 
        if(countA > countB) {
            for(int i = 0; i < countA - countB; i++) {
                headA = headA->next;
            }
            res = find(headA, headB);
        } else {
             for(int i = 0; i < countB - countA; i++) {
                 headB = headB->next;
            }           
            res = find(headA, headB);
        }
        return res;
    }
    ListNode *find(ListNode *headA, ListNode *headB) {
        while(headA != headB) {
            headA = headA->next;
            headB = headB->next;
        }
        return headA;
    }
    void recur(ListNode *node, int &count) {
        if(node == NULL) return;
        count++;
        recur(node->next, count);
    }

};