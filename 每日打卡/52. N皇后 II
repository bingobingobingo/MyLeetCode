class Solution {
public:
    int totalNQueens(int n) {
        unordered_set<int> colums, diagonalsl, diagonals2;
        return backtrack(n, 0, colums, diagonalsl, diagonals2);
    }
    //按行row递进的，所以不需要row的集合
    int backtrack(int n, int row, unordered_set<int>& colums, unordered_set<int>& diagonalsl, unordered_set<int>& diagonals2) {
        if( row == n) {
            return 1;
        } else{
            int count = 0;
            for(int i = 0; i < n; i++) {
                //在当前行找到还没有皇后的列
                if(colums.find(i) != colums.end()) {
                    continue;
                }
                int diagonal1 = row - i;
                if(diagonalsl.find(diagonal1) != diagonalsl.end()) {
                    continue;
                }
                int diagonal2 = row + i;
                if(diagonals2.find(diagonal2) != diagonals2.end()) {
                    continue;
                }
                colums.insert(i);
                diagonalsl.insert(diagonal1);
                diagonals2.insert(diagonal2);
                count+=backtrack(n, row + 1, colums, diagonalsl, diagonals2);
                colums.erase(i);
                diagonalsl.erase(diagonal1);
                diagonals2.erase(diagonal2);
            }
            return count;
        }
    }
};
