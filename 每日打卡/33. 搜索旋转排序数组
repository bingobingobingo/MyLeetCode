//二分搜索
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        if(n == 0) return -1;
        if(n == 1) return nums[0] == target? 0: -1;
        int l = 0;
        int r = n - 1;
        while(l <= r) {
            int mid = (l+r)/2;
           // cout<< mid << endl;
            if(target == nums[mid]) {
                return mid;
            } 
            if(nums[l] <= nums[mid]) {
                if(target >= nums[l] && target < nums[mid]) {
                    r = mid - 1;
                } else{
                    l = mid + 1;
                }
            } else{
                if(target > nums[mid] && target <= nums[r]) {
                    l = mid + 1;
                } else{
                    r = mid - 1;
                }
            }
        }
        return -1;
    }
};
